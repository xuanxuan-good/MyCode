'''
2021.2.6 lzx
AcWing 901. 滑雪 题解：https://www.acwing.com/activity/content/code/content/810114/
给定一个R行C列的矩阵，表示一个矩形网格滑雪场。矩阵中第 i 行第 j 列的点表示滑雪场的第 i 行第 j 列区域的高度。
一个人从滑雪场中的某个区域内出发，每次可以向上下左右任意一个方向滑动一个单位距离。
当然，一个人能够滑动到某相邻区域的前提是该区域的高度低于自己目前所在区域的高度。

下面给出一个矩阵作为例子：
 1  2  3  4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
在给定矩阵中，一条可行的滑行轨迹为24-17-2-1。在给定矩阵中，最长的滑行轨迹为25-24-23-…-3-2-1，沿途共经过25个区域。

现在给定你一个二维矩阵表示滑雪场各区域的高度，请你找出在该滑雪场中能够完成的最长滑雪轨迹，并输出其长度(可经过最大区域数)。

输入格式
第一行包含两个整数R和C。接下来R行，每行包含C个整数，表示完整的二维矩阵。

输出格式
输出一个整数，表示可完成的最长滑雪长度。

数据范围
1≤R,C≤300,
0≤矩阵中整数≤10000

输入样例：
5 5
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
输出样例：
25
'''


def dp(x, y):
    if f[x][y] != -1: return f[x][y]
    
    f[x][y] = 1
    for i in range(4):
        a, b = x + dx[i], y + dy[i]
        if 0 <= a < r and 0 <= b < c and h[a][b] < h[x][y]:
            f[x][y] = max(f[x][y], dp(a, b) + 1)
    
    return f[x][y]

r, c = map(int, input().split())
h = []
for _ in range(r):
    h.append(list(map(int, input().split())))
f = [[-1] * c for _ in range(r)]

dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]
res = 0
for i in range(r):
    for j in range(c):
        res = max(res, dp(i, j))
        
print(res)